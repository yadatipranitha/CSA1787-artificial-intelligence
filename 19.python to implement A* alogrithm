import heapq
import math

def A_star(graph, start, end):
    heap = [(0, start)]
    visited = set()
    while heap:
        (cost, current) = heapq.heappop(heap)
        if current in visited:
            continue
        visited.add(current)
        if current == end:
            return cost
        for neighbor in graph[current]:
            cost_to_neighbor = cost + graph[current][neighbor]
            heapq.heappush(heap, (cost_to_neighbor, neighbor))

graph = {
    'A': {'B': 1, 'C': 4, 'D': 10},
    'B': {'E': 3},
    'C': {'D': 4, 'F': 2},
    'D': {'E': 1},
    'E': {'F': 5},
    'F': {}
}

print(A_star(graph, 'A', 'F'))
